#!/usr/bin/env python
#-*-coding: utf-8-*-
PACKAGE = "obstacle_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("min_group_points", int_t, 0, "min_group_points", 1, 0, 100)

# gen.add("max_group_distance", float_t, 0, "max_group_distance", 0.1, 0, 100)
# gen.add("distance_proportion", float_t, 0, "distance_proportion", 0.00628, 0, 100)
# gen.add("max_split_distance", float_t, 0, "max_split_distance", 0.2, 0, 100)
# gen.add("max_merge_separation", float_t, 0, "max_merge_separation", 0.2, 0, 100)
# gen.add("max_merge_spread", float_t, 0, "max_merge_spread", 0.2, 0, 100)
# gen.add("max_circle_radius", float_t, 0, "max_merge_spread",  0.6, 0, 100)


'''
 'name', 'type', 'level', 'description', 'default', 'min', 'max'입니다. 
 Name은 파라미터가 저장되는 이름입니다. 
 Type은 파라미터의 자료형이며 int_t, float_t, str_t, bool_t 등이 가능합니다. 
 Level은 일종의 bit mask이며 dynamic_reconfigure callback이 호출될 때 변경된 모든 파라미터들의 레벨 값이 OR 연산되어 callback에 전달됩니다.
 Description은 파라미터에 대한 설명입니다. Default, min, max는 각각 파라미터의 초깃값, 최솟값, 최댓값입니다.
'''
exit(gen.generate(PACKAGE, "obstacle_detector", "dynamic_parameter_h"))
'''
정해진 설정대로 파일을 생성합니다. PACKAGE는 위에서 명시해 주었고, 
두 번째 인자는 node명, 세 번째 인자는 생성되는 파일 앞에 붙는 접두어입니다. 
예를 들어 위 설정에서 헤더 파일 이름은 dyn_reconfig_testConfig.h로 생성됩니다
'''
